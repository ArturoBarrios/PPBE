{"version":3,"sources":["../src/index.ts","../src/db/prismaClient.ts","../src/resolvers/userResolvers.ts","../src/resolvers/emailResolvers.ts","../src/resolvers/resolvers.ts"],"sourcesContent":["import express from 'express';\nimport cors from 'cors';\nimport cookieParser from 'cookie-parser';\n\n//highlight-start\nimport gql from \"graphql-tag\";\nimport { ApolloServer } from '@apollo/server';\nimport { buildSubgraphSchema } from '@apollo/subgraph';\nimport { expressMiddleware } from '@apollo/server/express4';\nimport resolvers from \"./resolvers/resolvers.js\";\nimport { readFileSync } from \"fs\";\nimport { dirname, resolve } from \"path\";\nimport { fileURLToPath } from \"url\";\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = dirname(__filename);\n\n\nconst PORT = process.env.PORT || 4000;\nconst app = express();\n\napp.use(cors({ origin: true, credentials: true }));\napp.use(express.json());\napp.use(cookieParser());\n\n// ‚úÖ This now always resolves the actual path correctly\nconst schemaPath = resolve(__dirname, \"schema.graphql\");\n\nconsole.log(\"üìÑ Loading schema from:\", schemaPath); // debug log\n\nconst typeDefs = gql(readFileSync(schemaPath, \"utf-8\"));\n\n\n\nconst server = new ApolloServer({\n    schema: buildSubgraphSchema({ typeDefs, resolvers }),\n});\n// Note you must call `start()` on the `ApolloServer`\n// instance before passing the instance to `expressMiddleware`\nawait server.start();\n//highlight-end\n\napp.use(\"/graphql\", expressMiddleware(server, {\n    context: async ({ req, res }) => ({ req, res }) // ‚úÖ Allow access to cookies and res object\n  }));\n\n\n\napp.listen({ port: PORT, host: '0.0.0.0' });\n","import { PrismaClient } from \"@prisma/client\";\n\nconst prisma = new PrismaClient();\n\nexport default prisma;\n","import prisma from \"../db/prismaClient\";\nimport jwt from 'jsonwebtoken'\n\nconst JWT_SECRET = process.env.JWT_SECRET || 'dev-secret'\n\nconst userResolvers = {\n  User: {\n    id: (parent: any) => parent.id, \n  },\n  Query: {\n    async user(_: any, { id }: { id: string }) {\n      return await prisma.user.findUnique({\n        where: { id },\n      });\n    },\n    async users() {\n      return await prisma.user.findMany();\n    },\n    async me(_: any, __: any, context: any) {\n      try {\n        const token = context.req.cookies?.token;\n        if (!token) return null;\n  \n        const decoded = jwt.verify(token, JWT_SECRET) as { userId: string };\n        return await prisma.user.findUnique({ where: { id: decoded.userId } });\n      } catch (err) {\n        console.error(\"[me] Error:\", err);\n        return null;\n      }\n    },\n  },\n  Mutation: {\n    async signin(_: any, { email, password }: { email: string; password: string }, context: any) {\n      try {\n        const user = await prisma.user.findUnique({ where: { email } })\n        console.log(\"signin....... with user: \", user)\n        if (!user || user.password !== password) {\n          throw new Error(\"Invalid credentials\")\n        }\n        const token = jwt.sign({ userId: user.id }, JWT_SECRET, { expiresIn: '7d' })\n        context.res.cookie('token', token, {\n          httpOnly: true,\n          secure: process.env.ENV === 'production',\n          sameSite: 'lax',\n          maxAge: 7 * 24 * 60 * 60 * 1000, // 7 days\n        })\n\nconsole.log(\"signin....... with token: \", token)\n        return user\n      } catch (err) {\n        console.error(\"[signin] Error:\", err)\n        throw new Error(\"Signin failed\")\n      }\n    },\n    async createUser(\n      _: any,\n      args: { name: string; birthday: string; email: string; phone: string; password: string }\n    ) {\n      try {\n        const newUser = await prisma.user.create({\n          data: {\n            name: args.name,\n            birthday: args.birthday,\n            email: args.email,\n            phone: args.phone,\n            password: args.password,\n          },\n        });\n        return newUser;\n      } catch (error) {\n        console.error(\"[createUser] Error:\", error);\n        return null;\n      }\n    },\n    \n\n    async updateUser(\n      _: any,\n      args: { id: string; name?: string; email?: string }\n    ) {\n      try {\n        const updatedUser = await prisma.user.update({\n          where: { id: args.id },\n          data: {\n            name: args.name ?? undefined,\n            email: args.email ?? undefined,\n          },\n        });\n        return updatedUser;\n      } catch (error) {\n        console.error(\"[updateUser] Error:\", error);\n        return null;\n      }\n    },\n\n    async deleteUser(_: any, { id }: { id: string }) {\n      try {\n        await prisma.user.delete({ where: { id } });\n        return true;\n      } catch (error) {\n        console.error(\"[deleteUser] Error:\", error);\n        return false;\n      }\n    },\n  },\n};\n\nexport default userResolvers;\n","// src/resolvers/emailResolvers.ts\n\nimport { Resend } from 'resend'\n\n const emailResolvers = {\n  Mutation: {\n    sendTestEmail: async (_: any, { to }: { to: string }) => {\n      const resend = new Resend(process.env.RESEND_API_KEY)\n\n      const { data, error } = await resend.emails.send({\n        from: 'PeacePad <onboarding@resend.dev>',\n        to: [to],\n        subject: 'Welcome to PeacePad',\n        html: `<p>Congrats on finding your quiet place üßò‚Äç‚ôÇÔ∏è</p>`,\n      })\n\n      if (error) {\n        console.error('[Email Error]', error)\n        return false\n      }\n\n      console.log('[Email Sent]', data)\n      return true\n    }\n  }\n}\n\nexport default emailResolvers;","// src/resolvers/resolvers.ts\n\nimport userResolvers from \"./userResolvers\";\nimport emailResolvers from \"./emailResolvers\";\n\nexport default {\n  Query: {\n    ...userResolvers.Query,\n  },\n  Mutation: {\n    ...userResolvers.Mutation,\n    ...emailResolvers.Mutation,\n  },\n};\n"],"mappings":"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","names":["__filename","__dirname"]}