{"version":3,"sources":["../src/index.ts","../src/db/prismaClient.ts","../src/resolvers/userResolvers.ts","../src/resolvers/emailResolvers.ts","../src/resolvers/resolvers.ts"],"sourcesContent":["import express from 'express';\nimport cors from 'cors';\n\n//highlight-start\nimport gql from \"graphql-tag\";\nimport { ApolloServer } from '@apollo/server';\nimport { buildSubgraphSchema } from '@apollo/subgraph';\nimport { expressMiddleware } from '@apollo/server/express4';\nimport resolvers from \"./resolvers/resolvers.js\";\nimport { readFileSync } from \"fs\";\nimport { dirname, resolve } from \"path\";\nimport { fileURLToPath } from \"url\";\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = dirname(__filename);\n\n\nconst PORT = process.env.PORT || 4000;\nconst app = express();\n\napp.use(cors());\napp.use(express.json());\n\n// ‚úÖ This now always resolves the actual path correctly\nconst schemaPath = resolve(__dirname, \"schema.graphql\");\n\nconsole.log(\"üìÑ Loading schema from:\", schemaPath); // debug log\n\nconst typeDefs = gql(readFileSync(schemaPath, \"utf-8\"));\n\n\n\nconst server = new ApolloServer({\n    schema: buildSubgraphSchema({ typeDefs, resolvers }),\n});\n// Note you must call `start()` on the `ApolloServer`\n// instance before passing the instance to `expressMiddleware`\nawait server.start();\n//highlight-end\n\napp.use(\"/graphql\", expressMiddleware(server));\n\n// start the Express server\napp.listen(PORT, () => {\n  console.log(`Server is running on port: ${PORT}`);\n});","import { PrismaClient } from \"@prisma/client\";\n\nconst prisma = new PrismaClient();\n\nexport default prisma;\n","import prisma from \"../db/prismaClient\"; // Make sure this exports a PrismaClient instance\n\nconst userResolvers = {\n  User: {\n    id: (parent: any) => parent.id, // Prisma always returns `id`, no `_id`\n  },\n  Query: {\n    async user(_: any, { id }: { id: string }) {\n      return await prisma.user.findUnique({\n        where: { id },\n      });\n    },\n    async users() {\n      return await prisma.user.findMany();\n    },\n  },\n  Mutation: {\n    async createUser(_: any, { email }: { email: string }) {\n      try {\n        const newUser = await prisma.user.create({\n          data: { email },\n        });\n        return newUser;\n      } catch (error) {\n        console.error(\"[createUser] Error:\", error);\n        return null;\n      }\n    },\n\n    async updateUser(\n      _: any,\n      args: { id: string; name?: string; email?: string }\n    ) {\n      try {\n        const updatedUser = await prisma.user.update({\n          where: { id: args.id },\n          data: {\n            name: args.name ?? undefined,\n            email: args.email ?? undefined,\n          },\n        });\n        return updatedUser;\n      } catch (error) {\n        console.error(\"[updateUser] Error:\", error);\n        return null;\n      }\n    },\n\n    async deleteUser(_: any, { id }: { id: string }) {\n      try {\n        await prisma.user.delete({ where: { id } });\n        return true;\n      } catch (error) {\n        console.error(\"[deleteUser] Error:\", error);\n        return false;\n      }\n    },\n  },\n};\n\nexport default userResolvers;\n","// src/resolvers/emailResolvers.ts\n\nimport { Resend } from 'resend'\n\n const emailResolvers = {\n  Mutation: {\n    sendTestEmail: async (_: any, { to }: { to: string }) => {\n      const resend = new Resend(process.env.RESEND_API_KEY)\n\n      const { data, error } = await resend.emails.send({\n        from: 'PeacePad <onboarding@resend.dev>',\n        to: [to],\n        subject: 'Welcome to PeacePad',\n        html: `<p>Congrats on finding your quiet place üßò‚Äç‚ôÇÔ∏è</p>`,\n      })\n\n      if (error) {\n        console.error('[Email Error]', error)\n        return false\n      }\n\n      console.log('[Email Sent]', data)\n      return true\n    }\n  }\n}\n\nexport default emailResolvers;","// src/resolvers/resolvers.ts\n\nimport userResolvers from \"./userResolvers\";\nimport emailResolvers from \"./emailResolvers\";\n\nexport default {\n  Query: {\n    ...userResolvers.Query,\n  },\n  Mutation: {\n    ...userResolvers.Mutation,\n    ...emailResolvers.Mutation,\n  },\n};\n"],"mappings":"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","names":["__filename","__dirname"]}